// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "autoStyleTag": errors 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "autoStyleTag": warnings 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "lazyAutoStyleTag": errors 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "lazyAutoStyleTag": warnings 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "lazySingletonStyleTag": errors 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "lazySingletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "lazyStyleTag": errors 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "lazyStyleTag": warnings 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "linkTag": errors 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "linkTag": warnings 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "singletonStyleTag": errors 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "singletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "styleTag": errors 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "styleTag": warnings 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "autoStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "autoStyleTag": errors 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "autoStyleTag": warnings 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "lazyAutoStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "lazyAutoStyleTag": errors 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "lazyAutoStyleTag": warnings 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "lazySingletonStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "lazySingletonStyleTag": errors 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "lazySingletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "lazyStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "lazyStyleTag": errors 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "lazyStyleTag": warnings 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "linkTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<link rel=\\"stylesheet\\" href=\\"style.css\\"><link rel=\\"stylesheet\\" href=\\"style-other.css\\"></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "linkTag": errors 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "linkTag": warnings 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "singletonStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "singletonStyleTag": errors 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "singletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "styleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "styleTag": errors 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "styleTag": warnings 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "autoStyleTag": errors 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "autoStyleTag": warnings 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "lazyAutoStyleTag": errors 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "lazyAutoStyleTag": warnings 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "lazySingletonStyleTag": errors 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "lazySingletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "lazyStyleTag": errors 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "lazyStyleTag": warnings 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "linkTag": errors 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "linkTag": warnings 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "singletonStyleTag": errors 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "singletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "styleTag": errors 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "styleTag": warnings 1`] = `Array []`;

exports[`loader should work when ref is negative when the "injectType" option is "lazySingletonStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when ref is negative when the "injectType" option is "lazySingletonStyleTag": errors 1`] = `Array []`;

exports[`loader should work when ref is negative when the "injectType" option is "lazySingletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should work when ref is negative when the "injectType" option is "lazyStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when ref is negative when the "injectType" option is "lazyStyleTag": errors 1`] = `Array []`;

exports[`loader should work when ref is negative when the "injectType" option is "lazyStyleTag": warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "autoStyleTag" and CommonJS module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "autoStyleTag" and CommonJS module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "autoStyleTag" and CommonJS module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "autoStyleTag" and ES module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "autoStyleTag" and ES module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "autoStyleTag" and ES module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "autoStyleTag" and files have same name: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.foo {
  color: red;
}
</style><style>.bar {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "autoStyleTag" and files have same name: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "autoStyleTag" and files have same name: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "autoStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "autoStyleTag": errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "autoStyleTag": warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyAutoStyleTag" and CommonJS module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazyAutoStyleTag" and CommonJS module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyAutoStyleTag" and CommonJS module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyAutoStyleTag" and ES module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazyAutoStyleTag" and ES module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyAutoStyleTag" and ES module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyAutoStyleTag" and files have same name: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.foo {
  color: red;
}
</style><style>.bar {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazyAutoStyleTag" and files have same name: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyAutoStyleTag" and files have same name: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyAutoStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazyAutoStyleTag": errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyAutoStyleTag": warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag" and CommonJS module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag" and CommonJS module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag" and CommonJS module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag" and ES module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag" and ES module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag" and ES module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag" and files have same name: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.foo {
  color: red;
}
.bar {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag" and files have same name: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag" and files have same name: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag": errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyStyleTag" and CommonJS module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazyStyleTag" and CommonJS module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyStyleTag" and CommonJS module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyStyleTag" and ES module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazyStyleTag" and ES module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyStyleTag" and ES module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyStyleTag" and files have same name: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.foo {
  color: red;
}
</style><style>.bar {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazyStyleTag" and files have same name: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyStyleTag" and files have same name: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazyStyleTag": errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyStyleTag": warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "linkTag" and CommonJS module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<link rel=\\"stylesheet\\" href=\\"style.css\\"><link rel=\\"stylesheet\\" href=\\"style-other.css\\"></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "linkTag" and CommonJS module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "linkTag" and CommonJS module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "linkTag" and ES module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<link rel=\\"stylesheet\\" href=\\"style.css\\"><link rel=\\"stylesheet\\" href=\\"style-other.css\\"></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "linkTag" and ES module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "linkTag" and ES module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "linkTag" and files have same name: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<link rel=\\"stylesheet\\" href=\\"nested/style.css\\"><link rel=\\"stylesheet\\" href=\\"other-nested/style.css\\"></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "linkTag" and files have same name: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "linkTag" and files have same name: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "linkTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<link rel=\\"stylesheet\\" href=\\"style.css\\"><link rel=\\"stylesheet\\" href=\\"style-other.css\\"></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "linkTag": errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "linkTag": warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "singletonStyleTag" and CommonJS module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "singletonStyleTag" and CommonJS module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "singletonStyleTag" and CommonJS module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "singletonStyleTag" and ES module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "singletonStyleTag" and ES module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "singletonStyleTag" and ES module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "singletonStyleTag" and files have same name: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.foo {
  color: red;
}
.bar {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "singletonStyleTag" and files have same name: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "singletonStyleTag" and files have same name: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "singletonStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "singletonStyleTag": errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "singletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "styleTag" and CommonJS module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "styleTag" and CommonJS module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "styleTag" and CommonJS module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "styleTag" and ES module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "styleTag" and ES module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "styleTag" and ES module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "styleTag" and files have same name: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.foo {
  color: red;
}
</style><style>.bar {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "styleTag" and files have same name: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "styleTag" and files have same name: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "styleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "styleTag": errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "styleTag": warnings 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "autoStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.css-modules-local-scoped-className_B_X8gxt {
  background: red;
}
</style><style>.css-modules-myClassName_ll2xYwU {
  background: red;
}

.css-modules-myComposingClass__qO4CWd {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


<div class=\\"css-modules-myClassName_ll2xYwU\\">Water</div><div class=\\"css-modules-myComposingClass__qO4CWd css-modules-local-scoped-className_B_X8gxt\\">Ground</div></body></html>"
`;

exports[`loader should work with css modules when the "injectType" option is "autoStyleTag": errors 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "autoStyleTag": warnings 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "lazyAutoStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.css-modules-local-scoped-className_B_X8gxt {
  background: red;
}
</style><style>.css-modules-myClassName_ll2xYwU {
  background: red;
}

.css-modules-myComposingClass__qO4CWd {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


<div class=\\"css-modules-myClassName_ll2xYwU\\">Water</div><div class=\\"css-modules-myComposingClass__qO4CWd css-modules-local-scoped-className_B_X8gxt\\">Ground</div></body></html>"
`;

exports[`loader should work with css modules when the "injectType" option is "lazyAutoStyleTag": errors 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "lazyAutoStyleTag": warnings 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "lazySingletonStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.css-modules-local-scoped-className_B_X8gxt {
  background: red;
}
.css-modules-myClassName_ll2xYwU {
  background: red;
}

.css-modules-myComposingClass__qO4CWd {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


<div class=\\"css-modules-myClassName_ll2xYwU\\">Water</div><div class=\\"css-modules-myComposingClass__qO4CWd css-modules-local-scoped-className_B_X8gxt\\">Ground</div></body></html>"
`;

exports[`loader should work with css modules when the "injectType" option is "lazySingletonStyleTag": errors 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "lazySingletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "lazyStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.css-modules-local-scoped-className_B_X8gxt {
  background: red;
}
</style><style>.css-modules-myClassName_ll2xYwU {
  background: red;
}

.css-modules-myComposingClass__qO4CWd {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


<div class=\\"css-modules-myClassName_ll2xYwU\\">Water</div><div class=\\"css-modules-myComposingClass__qO4CWd css-modules-local-scoped-className_B_X8gxt\\">Ground</div></body></html>"
`;

exports[`loader should work with css modules when the "injectType" option is "lazyStyleTag": errors 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "lazyStyleTag": warnings 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "linkTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<link rel=\\"stylesheet\\" href=\\"css-modules.css\\"></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


<div class=\\"undefined\\">Water</div><div class=\\"undefined\\">Ground</div></body></html>"
`;

exports[`loader should work with css modules when the "injectType" option is "linkTag": errors 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "linkTag": warnings 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "singletonStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.css-modules-local-scoped-className_B_X8gxt {
  background: red;
}
.css-modules-myClassName_ll2xYwU {
  background: red;
}

.css-modules-myComposingClass__qO4CWd {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


<div class=\\"css-modules-myClassName_ll2xYwU\\">Water</div><div class=\\"css-modules-myComposingClass__qO4CWd css-modules-local-scoped-className_B_X8gxt\\">Ground</div></body></html>"
`;

exports[`loader should work with css modules when the "injectType" option is "singletonStyleTag": errors 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "singletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "styleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.css-modules-local-scoped-className_B_X8gxt {
  background: red;
}
</style><style>.css-modules-myClassName_ll2xYwU {
  background: red;
}

.css-modules-myComposingClass__qO4CWd {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


<div class=\\"css-modules-myClassName_ll2xYwU\\">Water</div><div class=\\"css-modules-myComposingClass__qO4CWd css-modules-local-scoped-className_B_X8gxt\\">Ground</div></body></html>"
`;

exports[`loader should work with css modules when the "injectType" option is "styleTag": errors 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "styleTag": warnings 1`] = `Array []`;

exports[`loader should work: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work: errors 1`] = `Array []`;

exports[`loader should work: warnings 1`] = `Array []`;
