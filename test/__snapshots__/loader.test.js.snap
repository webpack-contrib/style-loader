// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loader should generate source maps when previous loader emit them when the "injectType" option is "lazySingletonStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should generate source maps when previous loader emit them when the "injectType" option is "lazySingletonStyleTag": errors 1`] = `Array []`;

exports[`loader should generate source maps when previous loader emit them when the "injectType" option is "lazySingletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should generate source maps when previous loader emit them when the "injectType" option is "lazyStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlLmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFVBQVU7QUFDWiIsImZpbGUiOiJzdHlsZS5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJib2R5IHtcbiAgY29sb3I6IHJlZDtcbn1cbiJdfQ== */</style><style>h1 {
  color: blue;
}

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlLW90aGVyLmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQVc7QUFDYiIsImZpbGUiOiJzdHlsZS1vdGhlci5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJoMSB7XG4gIGNvbG9yOiBibHVlO1xufVxuIl19 */</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should generate source maps when previous loader emit them when the "injectType" option is "lazyStyleTag": errors 1`] = `Array []`;

exports[`loader should generate source maps when previous loader emit them when the "injectType" option is "lazyStyleTag": warnings 1`] = `Array []`;

exports[`loader should generate source maps when previous loader emit them when the "injectType" option is "linkTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<link rel=\\"stylesheet\\" href=\\"b7ec60149d04b7df3ec0b0ea905c958f.css\\"><link rel=\\"stylesheet\\" href=\\"3ad0380f4e321840594c0b1a5f8ac163.css\\"></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should generate source maps when previous loader emit them when the "injectType" option is "linkTag": errors 1`] = `Array []`;

exports[`loader should generate source maps when previous loader emit them when the "injectType" option is "linkTag": warnings 1`] = `Array []`;

exports[`loader should generate source maps when previous loader emit them when the "injectType" option is "singletonStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should generate source maps when previous loader emit them when the "injectType" option is "singletonStyleTag": errors 1`] = `Array []`;

exports[`loader should generate source maps when previous loader emit them when the "injectType" option is "singletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should generate source maps when previous loader emit them when the "injectType" option is "styleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlLmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFVBQVU7QUFDWiIsImZpbGUiOiJzdHlsZS5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJib2R5IHtcbiAgY29sb3I6IHJlZDtcbn1cbiJdfQ== */</style><style>h1 {
  color: blue;
}

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlLW90aGVyLmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQVc7QUFDYiIsImZpbGUiOiJzdHlsZS1vdGhlci5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJoMSB7XG4gIGNvbG9yOiBibHVlO1xufVxuIl19 */</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should generate source maps when previous loader emit them when the "injectType" option is "styleTag": errors 1`] = `Array []`;

exports[`loader should generate source maps when previous loader emit them when the "injectType" option is "styleTag": warnings 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "lazySingletonStyleTag": errors 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "lazySingletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "lazyStyleTag": errors 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "lazyStyleTag": warnings 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "linkTag": errors 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "linkTag": warnings 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "singletonStyleTag": errors 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "singletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "styleTag": errors 1`] = `Array []`;

exports[`loader should inject hmr code with HotModuleReplacementPlugin when the "injectType" option is "styleTag": warnings 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "lazySingletonStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "lazySingletonStyleTag": errors 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "lazySingletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "lazyStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "lazyStyleTag": errors 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "lazyStyleTag": warnings 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "linkTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<link rel=\\"stylesheet\\" href=\\"b7ec60149d04b7df3ec0b0ea905c958f.css\\"><link rel=\\"stylesheet\\" href=\\"3ad0380f4e321840594c0b1a5f8ac163.css\\"></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "linkTag": errors 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "linkTag": warnings 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "singletonStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "singletonStyleTag": errors 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "singletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "styleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "styleTag": errors 1`] = `Array []`;

exports[`loader should not generate source maps when previous loader don't emit them when the "injectType" option is "styleTag": warnings 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "lazySingletonStyleTag": errors 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "lazySingletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "lazyStyleTag": errors 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "lazyStyleTag": warnings 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "linkTag": errors 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "linkTag": warnings 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "singletonStyleTag": errors 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "singletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "styleTag": errors 1`] = `Array []`;

exports[`loader should not inject hmr code without HotModuleReplacementPlugin when the "injectType" option is "styleTag": warnings 1`] = `Array []`;

exports[`loader should work when ref is negative when the "injectType" option is "lazySingletonStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when ref is negative when the "injectType" option is "lazySingletonStyleTag": errors 1`] = `Array []`;

exports[`loader should work when ref is negative when the "injectType" option is "lazySingletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should work when ref is negative when the "injectType" option is "lazyStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when ref is negative when the "injectType" option is "lazyStyleTag": errors 1`] = `Array []`;

exports[`loader should work when ref is negative when the "injectType" option is "lazyStyleTag": warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag" and CommonJS module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag" and CommonJS module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag" and CommonJS module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag" and ES module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag" and ES module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag" and ES module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag" and files have same name: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.foo {
  color: red;
}
.bar {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag" and files have same name: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag" and files have same name: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag": errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazySingletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyStyleTag" and CommonJS module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazyStyleTag" and CommonJS module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyStyleTag" and CommonJS module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyStyleTag" and ES module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazyStyleTag" and ES module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyStyleTag" and ES module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyStyleTag" and files have same name: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.foo {
  color: red;
}
</style><style>.bar {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazyStyleTag" and files have same name: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyStyleTag" and files have same name: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "lazyStyleTag": errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "lazyStyleTag": warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "linkTag" and CommonJS module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<link rel=\\"stylesheet\\" href=\\"b7ec60149d04b7df3ec0b0ea905c958f.css\\"><link rel=\\"stylesheet\\" href=\\"3ad0380f4e321840594c0b1a5f8ac163.css\\"></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "linkTag" and CommonJS module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "linkTag" and CommonJS module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "linkTag" and ES module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<link rel=\\"stylesheet\\" href=\\"b7ec60149d04b7df3ec0b0ea905c958f.css\\"><link rel=\\"stylesheet\\" href=\\"3ad0380f4e321840594c0b1a5f8ac163.css\\"></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "linkTag" and ES module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "linkTag" and ES module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "linkTag" and files have same name: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<link rel=\\"stylesheet\\" href=\\"1401b8f43471fce6b5976c74400fa9f5.css\\"><link rel=\\"stylesheet\\" href=\\"fca28e4b4529873225c2d35572d54d07.css\\"></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "linkTag" and files have same name: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "linkTag" and files have same name: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "linkTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<link rel=\\"stylesheet\\" href=\\"b7ec60149d04b7df3ec0b0ea905c958f.css\\"><link rel=\\"stylesheet\\" href=\\"3ad0380f4e321840594c0b1a5f8ac163.css\\"></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "linkTag": errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "linkTag": warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "singletonStyleTag" and CommonJS module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "singletonStyleTag" and CommonJS module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "singletonStyleTag" and CommonJS module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "singletonStyleTag" and ES module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "singletonStyleTag" and ES module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "singletonStyleTag" and ES module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "singletonStyleTag" and files have same name: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.foo {
  color: red;
}
.bar {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "singletonStyleTag" and files have same name: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "singletonStyleTag" and files have same name: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "singletonStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "singletonStyleTag": errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "singletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "styleTag" and CommonJS module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "styleTag" and CommonJS module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "styleTag" and CommonJS module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "styleTag" and ES module syntax used: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "styleTag" and ES module syntax used: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "styleTag" and ES module syntax used: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "styleTag" and files have same name: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.foo {
  color: red;
}
</style><style>.bar {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "styleTag" and files have same name: errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "styleTag" and files have same name: warnings 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "styleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work when the "injectType" option is "styleTag": errors 1`] = `Array []`;

exports[`loader should work when the "injectType" option is "styleTag": warnings 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "lazySingletonStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.css-modules-local-scoped-className_2SS6AUo {
  background: red;
}
.css-modules-myClassName_29qd4Wo {
  background: red;
}

.css-modules-myComposingClass_EtB1JLd {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


<div class=\\"css-modules-myClassName_29qd4Wo\\">Water</div><div class=\\"css-modules-myComposingClass_EtB1JLd css-modules-local-scoped-className_2SS6AUo\\">Ground</div></body></html>"
`;

exports[`loader should work with css modules when the "injectType" option is "lazySingletonStyleTag": errors 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "lazySingletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "lazyStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.css-modules-local-scoped-className_2SS6AUo {
  background: red;
}
</style><style>.css-modules-myClassName_29qd4Wo {
  background: red;
}

.css-modules-myComposingClass_EtB1JLd {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


<div class=\\"css-modules-myClassName_29qd4Wo\\">Water</div><div class=\\"css-modules-myComposingClass_EtB1JLd css-modules-local-scoped-className_2SS6AUo\\">Ground</div></body></html>"
`;

exports[`loader should work with css modules when the "injectType" option is "lazyStyleTag": errors 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "lazyStyleTag": warnings 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "linkTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<link rel=\\"stylesheet\\" href=\\"46f413702a8834c0c3cafe80ea39c35d.css\\"></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


<div class=\\"undefined\\">Water</div><div class=\\"undefined\\">Ground</div></body></html>"
`;

exports[`loader should work with css modules when the "injectType" option is "linkTag": errors 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "linkTag": warnings 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "singletonStyleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.css-modules-local-scoped-className_2SS6AUo {
  background: red;
}
.css-modules-myClassName_29qd4Wo {
  background: red;
}

.css-modules-myComposingClass_EtB1JLd {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


<div class=\\"css-modules-myClassName_29qd4Wo\\">Water</div><div class=\\"css-modules-myComposingClass_EtB1JLd css-modules-local-scoped-className_2SS6AUo\\">Ground</div></body></html>"
`;

exports[`loader should work with css modules when the "injectType" option is "singletonStyleTag": errors 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "singletonStyleTag": warnings 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "styleTag": DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>.css-modules-local-scoped-className_2SS6AUo {
  background: red;
}
</style><style>.css-modules-myClassName_29qd4Wo {
  background: red;
}

.css-modules-myComposingClass_EtB1JLd {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


<div class=\\"css-modules-myClassName_29qd4Wo\\">Water</div><div class=\\"css-modules-myComposingClass_EtB1JLd css-modules-local-scoped-className_2SS6AUo\\">Ground</div></body></html>"
`;

exports[`loader should work with css modules when the "injectType" option is "styleTag": errors 1`] = `Array []`;

exports[`loader should work with css modules when the "injectType" option is "styleTag": warnings 1`] = `Array []`;

exports[`loader should work: DOM 1`] = `
"<!DOCTYPE html><html><head>
  <title>style-loader test</title>
  <style id=\\"existing-style\\">.existing { color: yellow }</style>
<style>body {
  color: red;
}
</style><style>h1 {
  color: blue;
}
</style></head>
<body>
  <h1>Body</h1>
  <div class=\\"target\\"></div>
  <iframe class=\\"iframeTarget\\"></iframe>


</body></html>"
`;

exports[`loader should work: errors 1`] = `Array []`;

exports[`loader should work: warnings 1`] = `Array []`;
